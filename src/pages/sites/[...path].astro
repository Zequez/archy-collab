---
import Layout from "@layouts/Layout.astro";
import ezequiel from "@/agents/ezequiel.yml";
import nick from "@/agents/nick.yml";
import defaultAgent from "@/agents/default.yml";
import { hsla } from "@lib/utils";
import Nav from "@components/Nav";
import Markdown from "@components/modules/Markdown.astro";

const agents: { [key: string]: Agent } = { ezequiel, nick, defaultAgent };

const { path } = Astro.params;

type RouteInformation = {
  domainName: string;
  pageName: string;
};

function extractRouteInformation(path: string = ""): RouteInformation {
  const [domainName, ...ppp] = path.split("/");
  const pageName = ppp.join("/");

  return { pageName, domainName };
}

const { pageName, domainName } = extractRouteInformation(path);

function selectActiveAgent(domainName: string) {
  return agents[domainName] || agents.defaultAgent;
}

const agent = selectActiveAgent(domainName);

console.log("RouteInformation", pageName, domainName);
console.log("PATH", path);

const activePath = ((path || "").match(/\/[a-z]+$/) || [null])[0] || "/";

function addColorsToModules(modules: Module[]): Module[] {
  let currentColor = 10;
  for (let i = 0; i < agent.modules.length; ++i) {
    agent.modules[i].color = currentColor;
    currentColor += 50;
  }
  return modules;
}

addColorsToModules(agent.modules);

const activeModule = agent.modules.find((m) => m.path === activePath);

const moduleFromType = (moduleType: string, value: any) => {};

const activeModuleColor = hsla(activeModule?.color || 0);
---

<Layout title="App" favicon="" themeColor="">
  <div class="flex flex-col sm:flex-row h-full">
    <header
      class="relative z-10 overflow-hidden w-full h-1/2 sm:h-auto sm:w-1/2 sm:max-w-[600px]"
    >
      <div class="absolute z-0 inset-0">
        <img
          src={agent.background}
          class="w-full h-full object-cover object-center"
        />
      </div>
      <div
        class="absolute z-10 inset-0 flex flex-col items-center justify-center transition-opacity pb-0 sm:pb-16 md:pb-0"
      >
        <div
          class="relative mb-4 h-3/4 sm:h-auto sm:w-3/4 aspect-square object-cover rounded-full p-1 bg-white/50 border border-solid border-white/25 shadow-lg backdrop-blur-sm"
          style={{ animation: "wait 0.5s, scaleFadeIn 1.5s 0.5s" }}
        >
          <img src={agent.photo} class="w-full h-full rounded-full" />
        </div>
        <h1
          class="text-5xl text-white text-center font-thin whitespace-nowrap sm:whitespace-normal"
          style={{ textShadow: "0 1px 0 #0005, 0 0 5px #000" }}
        >
          {agent.name}
        </h1>
      </div>
    </header>
    <Nav
      modules={agent.modules}
      initialPath={`/${pageName}`}
      bgColor={agent.navColor}
      client:load
    />
    <main class="relative z-20 flex-grow min-h-[50%] sm:w-1/2 bg-[#F2D7B5]">
      <div
        class={`z-0 sm:absolute
        sm:pb-0
        pb-20
        sm:inset-0
        p-6
        text-lg font-light text-black/75 tracking-wide
        sm:overflow-auto transition-opacity transition-swup`}
        id="swup"
      >
        <div
          class="absolute inset-0 pointer-events-none hidden sm:block opacity-50"
          style={{ boxShadow: `inset 8px 0 0 0 ${activeModuleColor}` }}
        >
        </div>
        <div
          class="absolute inset-0 pointer-events-none block sm:hidden opacity-50"
          style={{ boxShadow: `inset 0 8px 0 0 ${activeModuleColor}` }}
        >
        </div>

        {
          activeModule ? (
            <>
              <h2 class="uppercase text-4xl mb-3 font-black">
                {activeModule.name}
              </h2>
              <Markdown value={activeModule.value} />
            </>
          ) : (
            "404"
          )
        }
      </div>
    </main>
  </div>

  <script>
    import Swup from "swup";
    const swup = new Swup({
      /* options */
    });
    (window as any).swup = swup;

    function init() {
      console.log("Init!");
    }

    function unload() {
      console.log("Unloading");
    }

    if (document.readyState === "complete") {
      init();
    } else {
      document.addEventListener("DOMContentLoaded", () => init());
    }

    swup.on("contentReplaced", init);
    swup.on("willReplaceContent", unload);
  </script>
</Layout>
